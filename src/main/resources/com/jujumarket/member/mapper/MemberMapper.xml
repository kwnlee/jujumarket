<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jujumarket.member.mapper.MemberMapper">
   
   <!-- 일반고객 회원가입시 idNo를 c000n 방식으로 부여 -->
   <insert id="insertCustomer">
      <selectKey keyProperty="idNo" order="BEFORE"
      resultType="String">
         select 'c'||lpad(seq_customer.nextval,4,'0')
         from dual
      </selectKey>
   
      insert into t_member (idNo, pwd, emailAccount, memName, memCode, memAddr, postCode) 
      values (#{idNo}, #{pwd}, #{emailAccount}, #{memName}, 'CUSTOMER',  #{memAddr, jdbcType=VARCHAR}, #{postCode, jdbcType=VARCHAR})
   </insert>
   
   <!-- 상인고객 회원가입시 idNo를 s000n 방식으로 부여 -->
   <insert id="insertSeller">
      <selectKey keyProperty="idNo" order="BEFORE"
      resultType="String">
         select 's'||lpad(seq_seller.nextval,4,'0')
         from dual
      </selectKey>
   
      insert into t_member (idNo, pwd, emailAccount, memName, memCode, memAddr, postCode) 
      values (#{idNo}, #{pwd}, #{emailAccount}, #{memName}, 'JUNIOR', #{memAddr, jdbcType=VARCHAR}, #{postCode, jdbcType=VARCHAR})

   </insert>

  
  <!-- 세션에 MemberVO로 아이디, 이메일계정, 회원이름, 회원분류 받아오기 -->
   <select id="getMemberInfo" resultType="com.jujumarket.member.domain.MemberVO">
         select idNo, emailAccount, memName, memCode
         from t_member
         where emailAccount = #{emailAccount}
   
   </select>
   
   <!-- 이메일 중복체크 -->
   <select id ="getEmailAccount" resultType="String">
      select emailAccount
      from t_member
      where emailAccount = #{emailAccount}
   
   </select>
   
   <!-- 비밀번호 받아서 회원탈퇴(회원정보삭제) -->
   <select id="getPwdByIdNo" resultType="String">
      select pwd
      from t_member
      where idNo = #{idNo}
   </select>
   
   
   <!-- 로그인 -->
   <select id="getPwdByEmailAccount" resultType="String">
      select pwd
      from t_member
      where emailAccount = #{emailAccount}


   </select> 
   
   <!-- orderItemsForm.jsp에 뿌려주기 위한 회원정보들을 MemberVO, CustomerVO에서 각각 받아 OrderMemberVO를 만듦 -->
   <select id="orderMemberInfo" resultType="com.jujumarket.order.domain.OrderMemberVO">
      select tm.memname, tm.memaddr, mc.contact, tm.emailAccount, tm.idNo, tm.postCode
      from t_member tm, m_customer mc
      where tm.idNo = mc.idNo
      and tm.idNo = #{idNo} 
   </select>
   
   <select id="orderSellerInfo" resultType="com.jujumarket.order.domain.OrderMemberVO">
      select m.*, s.contact1 contact
      from t_member m, m_shop s
      where m.idNo = s.idNo
      and m.idNo = #{idNo}
   </select>
   
   <select id="orderSocialInfo" resultType="com.jujumarket.order.domain.OrderMemberVO">
      select m.*, s.contact
      from t_member m, m_social s
      where m.idNo = s.idNo
      and m.idNo = #{idNo} 
   </select>
   
   <!-- 회원정보수정  -->
   <update id="modifyMemberInfo">
      update t_member
      set 
      memName = #{memName},
      memAddr = #{memAddr, jdbcType=VARCHAR},
      postCode = #{postCode, jdbcType=VARCHAR}
      where idNo = #{idNo}
   </update>
   
   <!-- 비밀번호 변경 -->
    <update id="updatePwd">
      update t_member
      set 
      pwd = #{pwd}
      where emailAccount = #{emailAccount}
   </update>
   
   <!-- 회원탈퇴 -->
   <delete id="deleteMember">
      delete t_member
   where idNo = #{idNo}   
   </delete>


   
</mapper>